// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// Usuario
	CreateUsuario(ctx context.Context, in *UsuarioRequest, opts ...grpc.CallOption) (*Usuario, error)
	GetUsuario(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Usuario, error)
	UpdateUsuario(ctx context.Context, in *UsuarioRequest, opts ...grpc.CallOption) (*Usuario, error)
	DeleteUsuario(ctx context.Context, in *Email, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUsuarios(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Usuarios, error)
	// Chat
	CreateChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Chat, error)
	GetChat(ctx context.Context, in *DataChat, opts ...grpc.CallOption) (*Chat, error)
	UpdateChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Chat, error)
	DeleteChat(ctx context.Context, in *IdChat, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChats(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Chats, error)
	// Mensagem
	CreateMensagem(ctx context.Context, in *MensagemRequest, opts ...grpc.CallOption) (*Mensagem, error)
	GetMensagem(ctx context.Context, in *DataMensagem, opts ...grpc.CallOption) (*Mensagem, error)
	UpdateMensagem(ctx context.Context, in *MensagemRequest, opts ...grpc.CallOption) (*Mensagem, error)
	DeleteMensagem(ctx context.Context, in *IdMensagem, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMensagens(ctx context.Context, in *IdChat, opts ...grpc.CallOption) (*Mensagens, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) CreateUsuario(ctx context.Context, in *UsuarioRequest, opts ...grpc.CallOption) (*Usuario, error) {
	out := new(Usuario)
	err := c.cc.Invoke(ctx, "/DataService/CreateUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetUsuario(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Usuario, error) {
	out := new(Usuario)
	err := c.cc.Invoke(ctx, "/DataService/GetUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateUsuario(ctx context.Context, in *UsuarioRequest, opts ...grpc.CallOption) (*Usuario, error) {
	out := new(Usuario)
	err := c.cc.Invoke(ctx, "/DataService/UpdateUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteUsuario(ctx context.Context, in *Email, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DataService/DeleteUsuario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetUsuarios(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Usuarios, error) {
	out := new(Usuarios)
	err := c.cc.Invoke(ctx, "/DataService/GetUsuarios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/DataService/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetChat(ctx context.Context, in *DataChat, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/DataService/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*Chat, error) {
	out := new(Chat)
	err := c.cc.Invoke(ctx, "/DataService/UpdateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteChat(ctx context.Context, in *IdChat, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DataService/DeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetChats(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Chats, error) {
	out := new(Chats)
	err := c.cc.Invoke(ctx, "/DataService/GetChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateMensagem(ctx context.Context, in *MensagemRequest, opts ...grpc.CallOption) (*Mensagem, error) {
	out := new(Mensagem)
	err := c.cc.Invoke(ctx, "/DataService/CreateMensagem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetMensagem(ctx context.Context, in *DataMensagem, opts ...grpc.CallOption) (*Mensagem, error) {
	out := new(Mensagem)
	err := c.cc.Invoke(ctx, "/DataService/GetMensagem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateMensagem(ctx context.Context, in *MensagemRequest, opts ...grpc.CallOption) (*Mensagem, error) {
	out := new(Mensagem)
	err := c.cc.Invoke(ctx, "/DataService/UpdateMensagem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteMensagem(ctx context.Context, in *IdMensagem, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/DataService/DeleteMensagem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetMensagens(ctx context.Context, in *IdChat, opts ...grpc.CallOption) (*Mensagens, error) {
	out := new(Mensagens)
	err := c.cc.Invoke(ctx, "/DataService/GetMensagens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility
type DataServiceServer interface {
	// Usuario
	CreateUsuario(context.Context, *UsuarioRequest) (*Usuario, error)
	GetUsuario(context.Context, *Email) (*Usuario, error)
	UpdateUsuario(context.Context, *UsuarioRequest) (*Usuario, error)
	DeleteUsuario(context.Context, *Email) (*emptypb.Empty, error)
	GetUsuarios(context.Context, *emptypb.Empty) (*Usuarios, error)
	// Chat
	CreateChat(context.Context, *ChatRequest) (*Chat, error)
	GetChat(context.Context, *DataChat) (*Chat, error)
	UpdateChat(context.Context, *ChatRequest) (*Chat, error)
	DeleteChat(context.Context, *IdChat) (*emptypb.Empty, error)
	GetChats(context.Context, *Email) (*Chats, error)
	// Mensagem
	CreateMensagem(context.Context, *MensagemRequest) (*Mensagem, error)
	GetMensagem(context.Context, *DataMensagem) (*Mensagem, error)
	UpdateMensagem(context.Context, *MensagemRequest) (*Mensagem, error)
	DeleteMensagem(context.Context, *IdMensagem) (*emptypb.Empty, error)
	GetMensagens(context.Context, *IdChat) (*Mensagens, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (UnimplementedDataServiceServer) CreateUsuario(context.Context, *UsuarioRequest) (*Usuario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsuario not implemented")
}
func (UnimplementedDataServiceServer) GetUsuario(context.Context, *Email) (*Usuario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsuario not implemented")
}
func (UnimplementedDataServiceServer) UpdateUsuario(context.Context, *UsuarioRequest) (*Usuario, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsuario not implemented")
}
func (UnimplementedDataServiceServer) DeleteUsuario(context.Context, *Email) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsuario not implemented")
}
func (UnimplementedDataServiceServer) GetUsuarios(context.Context, *emptypb.Empty) (*Usuarios, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsuarios not implemented")
}
func (UnimplementedDataServiceServer) CreateChat(context.Context, *ChatRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedDataServiceServer) GetChat(context.Context, *DataChat) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedDataServiceServer) UpdateChat(context.Context, *ChatRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChat not implemented")
}
func (UnimplementedDataServiceServer) DeleteChat(context.Context, *IdChat) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedDataServiceServer) GetChats(context.Context, *Email) (*Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedDataServiceServer) CreateMensagem(context.Context, *MensagemRequest) (*Mensagem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMensagem not implemented")
}
func (UnimplementedDataServiceServer) GetMensagem(context.Context, *DataMensagem) (*Mensagem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMensagem not implemented")
}
func (UnimplementedDataServiceServer) UpdateMensagem(context.Context, *MensagemRequest) (*Mensagem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMensagem not implemented")
}
func (UnimplementedDataServiceServer) DeleteMensagem(context.Context, *IdMensagem) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMensagem not implemented")
}
func (UnimplementedDataServiceServer) GetMensagens(context.Context, *IdChat) (*Mensagens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMensagens not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_CreateUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsuarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/CreateUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateUsuario(ctx, req.(*UsuarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/GetUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetUsuario(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsuarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/UpdateUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateUsuario(ctx, req.(*UsuarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteUsuario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteUsuario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/DeleteUsuario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteUsuario(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetUsuarios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetUsuarios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/GetUsuarios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetUsuarios(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetChat(ctx, req.(*DataChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/UpdateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteChat(ctx, req.(*IdChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/GetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetChats(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateMensagem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensagemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateMensagem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/CreateMensagem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateMensagem(ctx, req.(*MensagemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetMensagem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataMensagem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetMensagem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/GetMensagem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetMensagem(ctx, req.(*DataMensagem))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateMensagem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensagemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateMensagem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/UpdateMensagem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateMensagem(ctx, req.(*MensagemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteMensagem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMensagem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteMensagem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/DeleteMensagem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteMensagem(ctx, req.(*IdMensagem))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetMensagens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetMensagens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataService/GetMensagens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetMensagens(ctx, req.(*IdChat))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUsuario",
			Handler:    _DataService_CreateUsuario_Handler,
		},
		{
			MethodName: "GetUsuario",
			Handler:    _DataService_GetUsuario_Handler,
		},
		{
			MethodName: "UpdateUsuario",
			Handler:    _DataService_UpdateUsuario_Handler,
		},
		{
			MethodName: "DeleteUsuario",
			Handler:    _DataService_DeleteUsuario_Handler,
		},
		{
			MethodName: "GetUsuarios",
			Handler:    _DataService_GetUsuarios_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _DataService_CreateChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _DataService_GetChat_Handler,
		},
		{
			MethodName: "UpdateChat",
			Handler:    _DataService_UpdateChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _DataService_DeleteChat_Handler,
		},
		{
			MethodName: "GetChats",
			Handler:    _DataService_GetChats_Handler,
		},
		{
			MethodName: "CreateMensagem",
			Handler:    _DataService_CreateMensagem_Handler,
		},
		{
			MethodName: "GetMensagem",
			Handler:    _DataService_GetMensagem_Handler,
		},
		{
			MethodName: "UpdateMensagem",
			Handler:    _DataService_UpdateMensagem_Handler,
		},
		{
			MethodName: "DeleteMensagem",
			Handler:    _DataService_DeleteMensagem_Handler,
		},
		{
			MethodName: "GetMensagens",
			Handler:    _DataService_GetMensagens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service.proto",
}
