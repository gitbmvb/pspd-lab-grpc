// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: service.proto

package grpc_services

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataService_CreateUser_FullMethodName    = "/DataService/CreateUser"
	DataService_GetUser_FullMethodName       = "/DataService/GetUser"
	DataService_UpdateUser_FullMethodName    = "/DataService/UpdateUser"
	DataService_DeleteUser_FullMethodName    = "/DataService/DeleteUser"
	DataService_ListUsers_FullMethodName     = "/DataService/ListUsers"
	DataService_CreateChat_FullMethodName    = "/DataService/CreateChat"
	DataService_GetChat_FullMethodName       = "/DataService/GetChat"
	DataService_UpdateChat_FullMethodName    = "/DataService/UpdateChat"
	DataService_DeleteChat_FullMethodName    = "/DataService/DeleteChat"
	DataService_ListChats_FullMethodName     = "/DataService/ListChats"
	DataService_CreateMessage_FullMethodName = "/DataService/CreateMessage"
	DataService_GetMessage_FullMethodName    = "/DataService/GetMessage"
	DataService_UpdateMessage_FullMethodName = "/DataService/UpdateMessage"
	DataService_DeleteMessage_FullMethodName = "/DataService/DeleteMessage"
	DataService_ListMessages_FullMethodName  = "/DataService/ListMessages"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	// User
	CreateUser(ctx context.Context, in *UserCreateUpdateRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *UserReadDeleteRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UserCreateUpdateRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserReadDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error)
	// Chat
	CreateChat(ctx context.Context, in *ChatCreateRequest, opts ...grpc.CallOption) (*Chat, error)
	GetChat(ctx context.Context, in *ChatReadRequest, opts ...grpc.CallOption) (*Chat, error)
	UpdateChat(ctx context.Context, in *ChatUpdateRequest, opts ...grpc.CallOption) (*Chat, error)
	DeleteChat(ctx context.Context, in *ChatDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListChats(ctx context.Context, in *UserReadDeleteRequest, opts ...grpc.CallOption) (*Chats, error)
	// Message
	CreateMessage(ctx context.Context, in *MessageCreateRequest, opts ...grpc.CallOption) (*Message, error)
	GetMessage(ctx context.Context, in *MessageReadRequest, opts ...grpc.CallOption) (*Message, error)
	UpdateMessage(ctx context.Context, in *MessageUpdateRequest, opts ...grpc.CallOption) (*Message, error)
	DeleteMessage(ctx context.Context, in *MessageDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListMessages(ctx context.Context, in *ChatDeleteRequest, opts ...grpc.CallOption) (*Messages, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) CreateUser(ctx context.Context, in *UserCreateUpdateRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DataService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetUser(ctx context.Context, in *UserReadDeleteRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DataService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateUser(ctx context.Context, in *UserCreateUpdateRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, DataService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteUser(ctx context.Context, in *UserReadDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users)
	err := c.cc.Invoke(ctx, DataService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateChat(ctx context.Context, in *ChatCreateRequest, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, DataService_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetChat(ctx context.Context, in *ChatReadRequest, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, DataService_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateChat(ctx context.Context, in *ChatUpdateRequest, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, DataService_UpdateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteChat(ctx context.Context, in *ChatDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListChats(ctx context.Context, in *UserReadDeleteRequest, opts ...grpc.CallOption) (*Chats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chats)
	err := c.cc.Invoke(ctx, DataService_ListChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) CreateMessage(ctx context.Context, in *MessageCreateRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, DataService_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) GetMessage(ctx context.Context, in *MessageReadRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, DataService_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UpdateMessage(ctx context.Context, in *MessageUpdateRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, DataService_UpdateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteMessage(ctx context.Context, in *MessageDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, DataService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListMessages(ctx context.Context, in *ChatDeleteRequest, opts ...grpc.CallOption) (*Messages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Messages)
	err := c.cc.Invoke(ctx, DataService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	// User
	CreateUser(context.Context, *UserCreateUpdateRequest) (*User, error)
	GetUser(context.Context, *UserReadDeleteRequest) (*User, error)
	UpdateUser(context.Context, *UserCreateUpdateRequest) (*User, error)
	DeleteUser(context.Context, *UserReadDeleteRequest) (*empty.Empty, error)
	ListUsers(context.Context, *empty.Empty) (*Users, error)
	// Chat
	CreateChat(context.Context, *ChatCreateRequest) (*Chat, error)
	GetChat(context.Context, *ChatReadRequest) (*Chat, error)
	UpdateChat(context.Context, *ChatUpdateRequest) (*Chat, error)
	DeleteChat(context.Context, *ChatDeleteRequest) (*empty.Empty, error)
	ListChats(context.Context, *UserReadDeleteRequest) (*Chats, error)
	// Message
	CreateMessage(context.Context, *MessageCreateRequest) (*Message, error)
	GetMessage(context.Context, *MessageReadRequest) (*Message, error)
	UpdateMessage(context.Context, *MessageUpdateRequest) (*Message, error)
	DeleteMessage(context.Context, *MessageDeleteRequest) (*empty.Empty, error)
	ListMessages(context.Context, *ChatDeleteRequest) (*Messages, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) CreateUser(context.Context, *UserCreateUpdateRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDataServiceServer) GetUser(context.Context, *UserReadDeleteRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDataServiceServer) UpdateUser(context.Context, *UserCreateUpdateRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDataServiceServer) DeleteUser(context.Context, *UserReadDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDataServiceServer) ListUsers(context.Context, *empty.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedDataServiceServer) CreateChat(context.Context, *ChatCreateRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedDataServiceServer) GetChat(context.Context, *ChatReadRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedDataServiceServer) UpdateChat(context.Context, *ChatUpdateRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChat not implemented")
}
func (UnimplementedDataServiceServer) DeleteChat(context.Context, *ChatDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedDataServiceServer) ListChats(context.Context, *UserReadDeleteRequest) (*Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedDataServiceServer) CreateMessage(context.Context, *MessageCreateRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedDataServiceServer) GetMessage(context.Context, *MessageReadRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedDataServiceServer) UpdateMessage(context.Context, *MessageUpdateRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedDataServiceServer) DeleteMessage(context.Context, *MessageDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedDataServiceServer) ListMessages(context.Context, *ChatDeleteRequest) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateUser(ctx, req.(*UserCreateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReadDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetUser(ctx, req.(*UserReadDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateUser(ctx, req.(*UserCreateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReadDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteUser(ctx, req.(*UserReadDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateChat(ctx, req.(*ChatCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetChat(ctx, req.(*ChatReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateChat(ctx, req.(*ChatUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteChat(ctx, req.(*ChatDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReadDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListChats(ctx, req.(*UserReadDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).CreateMessage(ctx, req.(*MessageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetMessage(ctx, req.(*MessageReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UpdateMessage(ctx, req.(*MessageUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteMessage(ctx, req.(*MessageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListMessages(ctx, req.(*ChatDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DataService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DataService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DataService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _DataService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _DataService_ListUsers_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _DataService_CreateChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _DataService_GetChat_Handler,
		},
		{
			MethodName: "UpdateChat",
			Handler:    _DataService_UpdateChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _DataService_DeleteChat_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _DataService_ListChats_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _DataService_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _DataService_GetMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _DataService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _DataService_DeleteMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _DataService_ListMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
